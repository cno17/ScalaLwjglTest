package test.base.nanovg.pure

import org.joml.Vector2f
import org.lwjgl.BufferUtils
import org.lwjgl.nanovg.NVGColor
import org.lwjgl.nanovg.NanoVG.*
import org.lwjgl.nanovg.NanoVGGL3
import org.lwjgl.opengl.GL11C.*
import test.base.nanovg.util.Ball
import yage.base.glfw.GlApp
import yage.base.glfw.window.Window
import yage.base.glfw.window.WindowCreateInfo

import java.io.File
import java.nio.ByteBuffer
import scala.collection.mutable.ArrayBuffer
import scala.util.Random

object Balls extends GlApp:

  var ctxp: Long = 0
  var color1: NVGColor = null
  var color2: NVGColor = null
  var balls: Array[Ball] = null

  override def info() =
    val res = WindowCreateInfo()
    res.sizeX = 1200
    res.sizeY = 900
    res

  override def init() =
    ctxp = NanoVGGL3.nvgCreate(0)
    color1 = NVGColor.create()
    color2 = NVGColor.create()
    nvgRGBf(0.2f, 0.8f, 0.2f, color1)
    nvgRGBf(0.8f, 0.8f, 0.8f, color2)
    glClearColor(0, 0, 0, 1)
    balls = createBalls(20)


  override def draw() =
    val sx = Window.sizeX.toFloat
    val sy = Window.sizeY.toFloat
    glClear(GL_COLOR_BUFFER_BIT)
    nvgBeginFrame(ctxp, sx, sy, 1)
    nvgFillColor(ctxp, color1)
    nvgStrokeWidth(ctxp, 2.0f)
    nvgStrokeColor(ctxp, color2)
    nvgBeginPath(ctxp)
    // balls.foreach(_.draw(ctxp))
    nvgFill(ctxp)
    nvgStroke(ctxp)
    nvgClosePath(ctxp)
    nvgEndFrame(ctxp)

  override def step(t: Int, dt: Int) =
    val sx = Window.sizeX.toFloat
    val sy = Window.sizeY.toFloat
    balls.foreach(_.step(sx, sy, dt))

  def createBalls(n: Int) =
    val sx = Window.sizeX
    val sy = Window.sizeY
    val rnd = Random()
    val res = new Array[Ball](n)
    for i <- 0 to n - 1 do
      val px = sx * rnd.nextFloat()
      val py = sy * rnd.nextFloat()
      val vx = -1.0f * 2.0f * rnd.nextFloat()
      val vy = -1.0f * 2.0f * rnd.nextFloat()
      val rad = 5.0f + rnd.nextFloat() * 20.0f
      res(i) = Ball(Vector2f(px, py), Vector2f(vx, vy), rad)
    res

